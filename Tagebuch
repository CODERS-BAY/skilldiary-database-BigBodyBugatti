19.07.21

Kursbeginn

JAVA Auffrischung 

GitHub Einführung , Einführung in IntelliJ, 

Übungsbeispiele --> Erzähl was über Dich (Steckbrief), Einfache Rechenaufgaben & Arbeiten mit Strings

public class Rechnen {
    public static void main(String[] args) {
        int a = 1720;
        int b = 849;
        double c = 10.5;
        double d = 20.451;
        System.out.println(a + " + " + b + " = " + (a + b));
        System.out.printf("%d + %d = %d \n", a,b, a+b); //die %d sind ein kürzel um meine rechnung nicht wie oben geschrieben schreiben zu müssen.
        System.out.printf("%d - %d = %d\n",a, a, a-a);
        System.out.printf("%.2f / %.2f = %.2f \n",d,c,d/c );// f ist ein float oder double welche mit .und einer zahl wie bei mir 2 auf bestimmte dezimalstellen gerundet werden kann.
        System.out.printf("%d * %.5f = %.3f\n" ,a,c,a/c);
    }
}

20.07.21

Wiederholung von Theorie

Übungsbeispiele , Eigenschaften einer Zahl, Arbeitszeit oder Freizeit, Noten übersetzen

public class Noten {
    public static void main(String[] args) {
        int num = 3;

        switch (num) {
            case 1:
                System.out.println("Sehr gut");
                break;
            case 2:
                System.out.println("Gut");
                break;
            case 3:
                System.out.println("Befriedigend");
                break;
            case 4:
                System.out.println("Genügend");
                break;
            case 5:
                System.out.println( "Nicht genügend");
                break;

            default:
                System.out.println("Schulnoten von 1-5");
                break;
        }
    }
}

21.07.21

Schleifen und Formatierte Ausgabe wiederholt 

Übungsbeispiele: FizzBuzz, Ein mal Eins, CaeserChiffre, Berechnung des Maximums

22.07.21 - 23.07.21

Wiederholung & weitere Übungsbeispiele

26.07.21

Theorie , ERM 

Entität (Entity): individuell identifizierbares Objekt der Wirklichkeit; z. B. der Angestellte Müller, das Projekt 3232
Beziehung (Relationship): Verknüpfung / Zusammenhang zwischen zwei oder mehreren Entitäten; z. B. Angestellter Müller leitet Projekt 3232.
Eigenschaft (engl. attribute): Was über eine Entität (im Kontext) von Interesse ist; z. B. das Eintrittsdatum des Angestellten Müller.

Kardinalitäten 

Die gebräuchlichsten Beziehungen werden im Hinblick auf ihre Kardinalität in ihrer Grundform wie folgt eingeteilt:

    1 : 1
    
Jede Entität des einen Entitätstyps steht mit einer Entität des anderen Entitätstyps in Beziehung; gleiches gilt für die Gegenrichtung.

    1 : n
    
Jede Entität des einen Entitätstyps steht mit beliebig vielen Entitäten des anderen Entitätstyps in Beziehung. In der Gegenrichtung steht jede Entität des 
einen Entitätstyps mit einer Entität des anderen Entitätstyps in Beziehung.

    n : m
    
Jede Entität des einen Entitätstyps steht mit beliebig vielen Entitäten des anderen Entitätstyps in Beziehung; gleiches gilt für die Gegenrichtung.
In dieser Grundform werden die Beziehungsmengen nur mit ihrer Maximalaussage genannt – was i. d. R. nur in frühen Modellierungsstufen so angewendet wird.
Zur Implementierung im Datenbankdesign sind genauere Angaben erforderlich, was durch Verwendung einer Min-Max-Notation möglich ist: Damit wird durch eine zusätzliche
„Min-Angabe“ mit '0' oder 'c' ('conditioned') festgelegt, dass die Beziehung optional ist – bzw. mit '1', dass die Beziehung (bei 'n' mindestens einmal) existieren muss. 
Beispiele: 1,1 : 0,n oder 1 : 1c


27.07.21

Übungsbeispiel Hotel & Library 



28.07.21

Übungsbeispiel e-learning 

The data structure of a new e-learning system is to be implemented. 
Draw the following facts in an ER diagram in Chen notation and create a 
relational model No null values are allowed. An e-course is clearly identified
by a course number (LVANR). In addition, a designation (NAME) is stored, a 
maximum number of participants (MAXIMUM) and the amount of time (SIZE) required 
to complete the course. It is noted which e-courses are a prerequisite for which 
other e-courses. Learning modules have a name (NAME) and a unique identification
number (ID). Courses are assigned several learning modules (at least one). Learning 
modules can be used for several courses. For each course the sequence (ORDER) of modules 
is noted. Each learning module contains several learning objects (e.g. pictures, texts, videos).
Learning objects are uniquely identified by the module to which they are assigned and 
their name (NAME). The type (TYPE) is also stored for learning objects. In some cases, an 
e-course may also be assigned a test module (maximum). A mode (MODE) of a test module is known
and a unique name (DEFINITION) - a test module can be assigned to several e-courses. MC tests,
fees and external exams are exam modules. For each submission a deadline (DEADLINE) is also known.
A time (TIME) is known for each MC test. An MC test consists of several questions. Questions are clearly 
identified by an identification number (FRAGEID). For this purpose, the text (QUESTION), 
one correct (AW TRUE) and two incorrect answers (AW FALSE1, AW FALSE2) must be stored, whereby
a question can occur in several different MC tests. Persons are uniquely identified by a personal
number (PNR). The name (NAME) is also stored. Persons can participate in any number of courses. An e-course,
is moderated by at least one and at most two persons, whereby one person can moderate a maximum of four courses.


29.07.21 - 2. Impfung - Remote

30.07.21 - Kompetenzcheck Datenbanken,
1. NF, 2.NF , 3.NF , Kreuztabellen, 9 Coddschen Anforderungen, Datenmodellierung, Entity - Relationship - Modell , Primärschlüssel, Schlüsselattribute.

02.08.21 - Kompetenzcheck JAVA 1 Woche,






